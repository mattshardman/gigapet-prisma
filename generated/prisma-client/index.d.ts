// Code generated by Prisma (prisma@1.19.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  child: (where?: ChildWhereInput) => Promise<boolean>;
  parent: (where?: ParentWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  child: (where: ChildWhereUniqueInput) => Child;
  children: (
    args?: {
      where?: ChildWhereInput;
      orderBy?: ChildOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ChildNode>;
  childrenConnection: (
    args?: {
      where?: ChildWhereInput;
      orderBy?: ChildOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ChildConnection;
  parent: (where: ParentWhereUniqueInput) => Parent;
  parents: (
    args?: {
      where?: ParentWhereInput;
      orderBy?: ParentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ParentNode>;
  parentsConnection: (
    args?: {
      where?: ParentWhereInput;
      orderBy?: ParentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ParentConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChild: (data: ChildCreateInput) => Child;
  updateChild: (
    args: { data: ChildUpdateInput; where: ChildWhereUniqueInput }
  ) => Child;
  updateManyChildren: (
    args: { data: ChildUpdateInput; where?: ChildWhereInput }
  ) => BatchPayload;
  upsertChild: (
    args: {
      where: ChildWhereUniqueInput;
      create: ChildCreateInput;
      update: ChildUpdateInput;
    }
  ) => Child;
  deleteChild: (where: ChildWhereUniqueInput) => Child;
  deleteManyChildren: (where?: ChildWhereInput) => BatchPayload;
  createParent: (data: ParentCreateInput) => Parent;
  updateParent: (
    args: { data: ParentUpdateInput; where: ParentWhereUniqueInput }
  ) => Parent;
  updateManyParents: (
    args: { data: ParentUpdateInput; where?: ParentWhereInput }
  ) => BatchPayload;
  upsertParent: (
    args: {
      where: ParentWhereUniqueInput;
      create: ParentCreateInput;
      update: ParentUpdateInput;
    }
  ) => Parent;
  deleteParent: (where: ParentWhereUniqueInput) => Parent;
  deleteManyParents: (where?: ParentWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  child: (
    where?: ChildSubscriptionWhereInput
  ) => ChildSubscriptionPayloadSubscription;
  parent: (
    where?: ParentSubscriptionWhereInput
  ) => ParentSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ChildOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "pet_name_ASC"
  | "pet_name_DESC"
  | "pet_experience_ASC"
  | "pet_experience_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ParentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "pin_ASC"
  | "pin_DESC"
  | "img_url_ASC"
  | "img_url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ParentUpdateDataInput {
  name?: String;
  email?: String;
  username?: String;
  password?: String;
  pin?: String;
  img_url?: String;
}

export type ChildWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ChildUpdateInput {
  name?: String;
  pet_name?: String;
  pet_experience?: Int;
  parent?: ParentUpdateOneInput;
}

export interface ChildWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  pet_name?: String;
  pet_name_not?: String;
  pet_name_in?: String[] | String;
  pet_name_not_in?: String[] | String;
  pet_name_lt?: String;
  pet_name_lte?: String;
  pet_name_gt?: String;
  pet_name_gte?: String;
  pet_name_contains?: String;
  pet_name_not_contains?: String;
  pet_name_starts_with?: String;
  pet_name_not_starts_with?: String;
  pet_name_ends_with?: String;
  pet_name_not_ends_with?: String;
  pet_experience?: Int;
  pet_experience_not?: Int;
  pet_experience_in?: Int[] | Int;
  pet_experience_not_in?: Int[] | Int;
  pet_experience_lt?: Int;
  pet_experience_lte?: Int;
  pet_experience_gt?: Int;
  pet_experience_gte?: Int;
  parent?: ParentWhereInput;
  AND?: ChildWhereInput[] | ChildWhereInput;
  OR?: ChildWhereInput[] | ChildWhereInput;
  NOT?: ChildWhereInput[] | ChildWhereInput;
}

export interface ParentCreateInput {
  name: String;
  email: String;
  username: String;
  password: String;
  pin: String;
  img_url: String;
}

export interface ParentUpdateInput {
  name?: String;
  email?: String;
  username?: String;
  password?: String;
  pin?: String;
  img_url?: String;
}

export interface ChildCreateInput {
  name: String;
  pet_name: String;
  pet_experience: Int;
  parent?: ParentCreateOneInput;
}

export interface ParentCreateOneInput {
  create?: ParentCreateInput;
  connect?: ParentWhereUniqueInput;
}

export interface ChildSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ChildWhereInput;
  AND?: ChildSubscriptionWhereInput[] | ChildSubscriptionWhereInput;
  OR?: ChildSubscriptionWhereInput[] | ChildSubscriptionWhereInput;
  NOT?: ChildSubscriptionWhereInput[] | ChildSubscriptionWhereInput;
}

export type ParentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
}>;

export interface ParentUpsertNestedInput {
  update: ParentUpdateDataInput;
  create: ParentCreateInput;
}

export interface ParentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  pin?: String;
  pin_not?: String;
  pin_in?: String[] | String;
  pin_not_in?: String[] | String;
  pin_lt?: String;
  pin_lte?: String;
  pin_gt?: String;
  pin_gte?: String;
  pin_contains?: String;
  pin_not_contains?: String;
  pin_starts_with?: String;
  pin_not_starts_with?: String;
  pin_ends_with?: String;
  pin_not_ends_with?: String;
  img_url?: String;
  img_url_not?: String;
  img_url_in?: String[] | String;
  img_url_not_in?: String[] | String;
  img_url_lt?: String;
  img_url_lte?: String;
  img_url_gt?: String;
  img_url_gte?: String;
  img_url_contains?: String;
  img_url_not_contains?: String;
  img_url_starts_with?: String;
  img_url_not_starts_with?: String;
  img_url_ends_with?: String;
  img_url_not_ends_with?: String;
  AND?: ParentWhereInput[] | ParentWhereInput;
  OR?: ParentWhereInput[] | ParentWhereInput;
  NOT?: ParentWhereInput[] | ParentWhereInput;
}

export interface ParentUpdateOneInput {
  create?: ParentCreateInput;
  update?: ParentUpdateDataInput;
  upsert?: ParentUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ParentWhereUniqueInput;
}

export interface ParentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ParentWhereInput;
  AND?: ParentSubscriptionWhereInput[] | ParentSubscriptionWhereInput;
  OR?: ParentSubscriptionWhereInput[] | ParentSubscriptionWhereInput;
  NOT?: ParentSubscriptionWhereInput[] | ParentSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateParentNode {
  count: Int;
}

export interface AggregateParent
  extends Promise<AggregateParentNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateParentSubscription
  extends Promise<AsyncIterator<AggregateParentNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChildConnectionNode {}

export interface ChildConnection
  extends Promise<ChildConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ChildEdgeNode>>() => T;
  aggregate: <T = AggregateChild>() => T;
}

export interface ChildConnectionSubscription
  extends Promise<AsyncIterator<ChildConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChildEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChildSubscription>() => T;
}

export interface ChildSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ChildSubscriptionPayload
  extends Promise<ChildSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Child>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChildPreviousValues>() => T;
}

export interface ChildSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChildSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChildSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChildPreviousValuesSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ParentPreviousValuesNode {
  id: ID_Output;
  name: String;
  email: String;
  username: String;
  password: String;
  pin: String;
  img_url: String;
}

export interface ParentPreviousValues
  extends Promise<ParentPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  pin: () => Promise<String>;
  img_url: () => Promise<String>;
}

export interface ParentPreviousValuesSubscription
  extends Promise<AsyncIterator<ParentPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  pin: () => Promise<AsyncIterator<String>>;
  img_url: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChildNode {
  count: Int;
}

export interface AggregateChild
  extends Promise<AggregateChildNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChildSubscription
  extends Promise<AsyncIterator<AggregateChildNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChildPreviousValuesNode {
  id: ID_Output;
  name: String;
  pet_name: String;
  pet_experience: Int;
}

export interface ChildPreviousValues
  extends Promise<ChildPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  pet_name: () => Promise<String>;
  pet_experience: () => Promise<Int>;
}

export interface ChildPreviousValuesSubscription
  extends Promise<AsyncIterator<ChildPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  pet_name: () => Promise<AsyncIterator<String>>;
  pet_experience: () => Promise<AsyncIterator<Int>>;
}

export interface ChildNode {
  id: ID_Output;
  name: String;
  pet_name: String;
  pet_experience: Int;
}

export interface Child extends Promise<ChildNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  pet_name: () => Promise<String>;
  pet_experience: () => Promise<Int>;
  parent: <T = Parent>() => T;
}

export interface ChildSubscription
  extends Promise<AsyncIterator<ChildNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  pet_name: () => Promise<AsyncIterator<String>>;
  pet_experience: () => Promise<AsyncIterator<Int>>;
  parent: <T = ParentSubscription>() => T;
}

export interface ParentNode {
  id: ID_Output;
  name: String;
  email: String;
  username: String;
  password: String;
  pin: String;
  img_url: String;
}

export interface Parent extends Promise<ParentNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  pin: () => Promise<String>;
  img_url: () => Promise<String>;
}

export interface ParentSubscription
  extends Promise<AsyncIterator<ParentNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  pin: () => Promise<AsyncIterator<String>>;
  img_url: () => Promise<AsyncIterator<String>>;
}

export interface ParentEdgeNode {
  cursor: String;
}

export interface ParentEdge extends Promise<ParentEdgeNode>, Fragmentable {
  node: <T = Parent>() => T;
  cursor: () => Promise<String>;
}

export interface ParentEdgeSubscription
  extends Promise<AsyncIterator<ParentEdgeNode>>,
    Fragmentable {
  node: <T = ParentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChildEdgeNode {
  cursor: String;
}

export interface ChildEdge extends Promise<ChildEdgeNode>, Fragmentable {
  node: <T = Child>() => T;
  cursor: () => Promise<String>;
}

export interface ChildEdgeSubscription
  extends Promise<AsyncIterator<ChildEdgeNode>>,
    Fragmentable {
  node: <T = ChildSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ParentConnectionNode {}

export interface ParentConnection
  extends Promise<ParentConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ParentEdgeNode>>() => T;
  aggregate: <T = AggregateParent>() => T;
}

export interface ParentConnectionSubscription
  extends Promise<AsyncIterator<ParentConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ParentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateParentSubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ParentSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ParentSubscriptionPayload
  extends Promise<ParentSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Parent>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ParentPreviousValues>() => T;
}

export interface ParentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ParentSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ParentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ParentPreviousValuesSubscription>() => T;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
